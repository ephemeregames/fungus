{print}    = require 'sys'
{spawn}    = require 'child_process'
fs         = require 'fs'
execSync   = require 'exec-sync'

#==========================================================
# Utilities
#==========================================================

# Wait for x milliseconds
wait = (ms) ->
  setTimeout(->,
  ms)

# Copy one file
copy = (from, to) ->
  fs.writeFileSync(to, fs.readFileSync(from))


# Copy multiple files
copyAll = (from, to, includes = '.*', excludes = null) ->
  throw 'DirectoryNotFound' unless fs.existsSync(from)

  files = fs.readdirSync(from)

  for f in files
    continue unless f.match(includes)? and !f.match(excludes)?

    stats = fs.statSync("#{from}/#{f}")

    if stats.isDirectory()
      createDirectory("#{to}/#{f}")
      copyAll("#{from}/#{f}", "#{to}/#{f}")
    else
      copy("#{from}/#{f}", "#{to}/#{f}")


# Remove a directory (recursive)
removeDirectory = (path) ->
  return unless fs.existsSync(path)

  # get all the directories and files within path
  data = fs.readdirSync(path)
  directories = []
  files = []

  for d in data
    sub_path = "#{path}/#{d}"

    if fs.statSync(sub_path).isDirectory()
      directories.push(sub_path)
    else
      files.push(sub_path)

  # for each directory, repeat the process so far
  for d in directories
    removeDirectory(d)

  # at this point, we have enumerated each file and directory
  # and the bottom of the directory hierarchy starts processing

  # remove each file in the directory
  for f in files
    fs.unlinkSync(f)
 
  # remove the empty directory
  fs.rmdirSync(path)


# Create a directory if it doesn't exists (recursive)
createDirectory = (path) -> 
  sub_paths = path.split('/')

  path_to_create = ""

  for p in sub_paths
    path_to_create += "#{p}/"

    unless fs.existsSync(path_to_create)
      fs.mkdirSync(path_to_create, '711')


# Reset a directory, which means:
# - Remove and recreate the directory if presents
# - Create the directory if not
resetDirectory = (path) ->
  removeDirectory(path)
  createDirectory(path)


# Get a list of files paths from a directory (recursive)
# Usage: getFilesSync('path/to/folder', 'coffee$', '^interface')
getFilesSync = (from, includes = null, excludes = null, results = null) ->
  throw 'DirectoryNotFound' unless fs.existsSync(from)
  
  results ?= new Array
  
  files = fs.readdirSync(from)

  for name in files
    path = "#{from}/#{name}"
    stats = fs.statSync(path)
    results.push(path) if stats.isFile() and (includes == null || name.match(includes)?) and (excludes == null || !name.match(excludes)?)
    getFilesSync(path, includes, excludes, results) if stats.isDirectory()

  return results


# Merge multiple files from a directory (recursive)
# TODO remove 'interface' dependence
merge = (from, to, includes = 'coffee$', excludes = '^interface') ->
  files = getFilesSync(from, includes, excludes).sort()

  datas = new Array()
  
  for file in files
    datas.push(fs.readFileSync(file))
  
  fs.writeFileSync(to, datas.join('\n\n'))


# Merge one file into another file
mergeOne = (from, into) ->
  datas = [fs.readFileSync(into), fs.readFileSync(from)]
  fs.writeFileSync(into, datas.join('\n\n'))


# Compile
compile = (from, to, name) ->
  path = "#{to}/#{name}.coffee"

  # build
  execSync("coffee -c -o #{to} #{path}")

  # delete the merged file
  fs.unlinkSync(path)


# Compile all files from a directory
compileAll = (from, to, merge = false, ordered = true, name = 'game.js') ->

  files = if ordered && merge then files_to_compile(from).join(' ') else from

  if merge
    execSync("coffee -l -j #{to}/#{name} -c #{files}")
  else
    execSync("coffee -l -o #{to} -c #{files}")


# Watch all files from a directory and recompile when one is changed
watchAll = (from, to) ->
  execSync("coffee -c -o -w #{to} #{from}")


# Merge and compile files from a directory (recursive)
# Usage: mergeAndCompile('path/from', 'path/to', 'myscript')
mergeAndCompile = (from, to, name) ->
  path = "#{to}/#{name}.coffee"

  merge(from, path)

  # build & delete the merged file
  execSync("coffee -c -o #{to} #{path}")

  fs.unlink path


# Produce an ordered list of files to compile by analyzing
# their dependencies
files_to_compile = (from) ->

  # Gather all files from a directory
  files = getFilesSync(from, 'coffee$')

  # Read each file and get the list of require declarations
  # Store the results in a hash where:
  # - key == filename
  # - value == array dependencies
  files_and_dependencies = { }

  for f in files

    key = f.replace("#{from}/", '').replace('.coffee', '')
    files_and_dependencies[key] = []

    content = fs.readFileSync(f, 'utf8')
    require_declarations = content.match(/\s*#\s*require.+/g) || []

    for declaration in require_declarations
      files_and_dependencies[key].push(declaration.split(/\s*#\s*require\s+/g)[1])


  # Cycle through files and build the sorted list of files
  # If we cannot clear the list of files and dependencies, there is
  # a problem (i.e. circular dependency) and we throw an error.
  results = []

  for file, dependencies of files_and_dependencies
    # if the file has no dependencies, we put it in front of the list
    if dependencies.length == 0
      results.unshift(file) if results.indexOf(file) == -1
      continue

    # if the dependency doesn't exist, we put it in front of the list
    for d in dependencies
      results.unshift(d) if results.indexOf(d) == -1

    # we remove the file from the list if it exists
    current_index = results.indexOf(file)
    removed = results.splice(current_index, 1) if current_index != -1

    # we find the greater index of the dependencies and put the file after that position
    indexes = dependencies.map (d) -> results.indexOf(d)
    index = indexes.reduce (d1, d2) -> Math.max(d1, d2)

    results.splice(index + 1, 0, file)

  results.map (f) -> "#{from}/#{f}.coffee"


#==========================================================
# Tasks
#==========================================================

# Options

option '-p', '--port [port]', "port for the local server (command 'start' only)"


# Task: build
build = (output = 'bin/js') ->
  resetDirectory(output)
  compileAll('src', output)

task 'build', 'Build project', -> build()


# Task: watch
watch = (output = 'bin/js') ->
  resetDirectory(output)
  watchAll('src', output)

task 'watch', 'Watch project for changes', -> watch()


# Task: debug
debug = (output = 'bin/debug') ->
  resetDirectory(output)
  compileAll('src', output, true)
  copyAll('lib', output)

task 'debug', 'Build project in one file for debug', -> debug()


# Task: release
release = (output = 'bin/release') ->
  resetDirectory(output)
  compileAll('src', output, true)
  copyAll('lib', output)

  # minimize
  execSync("cat #{output}/game.js | uglifyjs -o #{output}/game.js")

task 'release', 'Build project in one file for release', -> release()


# Task: launch project
task 'start', 'Start the project', (options) ->
  debug()

  port = options.port ? 8000

  console.log("Starting HTTP server...")
  console.log("Go to http://localhost:#{port}/debug to play your game.")

  p = spawn 'python', ['-m', 'SimpleHTTPServer', port], {
    cwd: "#{process.cwd()}/bin",
    env: process.env,
    customFds: [-1, -1, -1]
  }

  p.stdout.on 'data', (data) ->
    print "stdout: #{data}"

  p.stderr.on 'data', (data) ->
    print "stderr: #{data}"

  p.on 'exit', (code) ->
    print "exit: #{code}"


# Task: test the core of the project
task 'test', 'Test the project', (options) ->
  build('tmp/tests')
  copyAll('lib/src', 'tmp/tests')

  # merge the test files
  compileAll('tests', 'tmp/tests', true, true, 'tests.js')
  execSync('node tmp/tests/tests.js')
  removeDirectory('tmp/tests')
